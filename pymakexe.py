## Written by: Carlos Bazaga#from distutils.core import setupimport argparseimport sys, os
import py2execlass SmartFormatter(argparse.HelpFormatter):    def _split_lines(self, text, width):        return text.splitlines()argparser = argparse.ArgumentParser(description='Compiles a python script into an .exe file using Py2exe.', formatter_class=SmartFormatter)argparser.add_argument('-u', dest= 'unbuffered',   action='store_true', help='Use unbuffered binary stdout and stderr.\n\n')argparser.add_argument('-c', dest= 'compressed',   action='store_true', help='Create a compressed zipfile.\n\n')argparser.add_argument('-x', dest= 'xref',         action='store_true', help='Create and show a module cross reference.\n\n')
argparser.add_argument('-a', dest= 'ascii',        action='store_true', help='Do not automatically include encodings and codecs.\n\n')
argparser.add_argument('-s', dest= 'skip_archive', action='store_true', help='''Do not place Python bytecode files in an archive,put them directly in the file system.\n\n''')argparser.add_argument('-o', dest='optimize',      choices=['0','1','2'], default='0', help='''Optimization level:  * 0 = do not optimize.    1 = normal optimization.    2 = extra optimization.\n\n''')argparser.add_argument('-b', dest='bundle_files',  choices=['1','2','3'], default='3', help='''Bundle dlls in the zipfile or the exe:    1 = Bundle everything, including the Python interpreter.    2 = Bundle everything but the Python interpreter.  * 3 = Do not bundle.\n\n''')argparser.add_argument('-i',  dest= 'includes',     default=[], nargs='*', help='List of module names to include.\n\n')argparser.add_argument('-p',  dest= 'packages',     default=[], nargs='*', help='List of packages to include with subpackages.\n\n')argparser.add_argument('-g',  dest= 'ignores',      default=[], nargs='*', help='list of modules to ignore if they are not found.\n\n')argparser.add_argument('-e',  dest= 'excludes',     default=[], nargs='*', help='List of module names to exclude.\n\n')argparser.add_argument('-d',  dest= 'dll_excludes', default=[], nargs='*', help='List of dlls to exclude.\n\n')argparser.add_argument('-wo',  dest= 'windows',     default=[], nargs='*', help='List of scripts to convert into GUI exes.\n\n')argparser.add_argument('-co',  dest= 'console',     default=[], nargs='*', help='List of scripts to convert into console exes.\n\n')
argparser.add_argument('-bs',  dest= 'boot_script', help='Python file that will be run when setting up the runtime environment.\n\n')
argparser.add_argument('-zf',  dest= 'zipfile',     default=None, help='''Name of shared zipfile to generate, may specify a subdirectory.
If zipfile is unset the files will be bundled within the executable instead.''')
args = argparser.parse_args()py2exe_options_dict = {'unbuffered':            args.unbuffered,                       'compressed':            args.compressed,                       'xref':                  args.xref,                       'skip_archive':          args.skip_archive,                       'ascii':                 args.ascii,                       'optimize':              int(args.optimize),                       'bundle_files':          int(args.bundle_files),                       'custom_boot_script':    args.boot_script,                       'includes':              args.includes,                       'packages':              args.packages,                       'ignores':               args.ignores,                       'excludes':              args.excludes,                       'dll_excludes':          args.dll_excludes}options = {'py2exe': py2exe_options_dict}

if len(sys.argv) > 2:    sys.argv[1] = "py2exe"
sys.path.append(os.path.abspath(os.path.curdir))
if len(sys.argv) > 2:
    sys.argv = sys.argv[:2]
setup(console=args.console, windows=args.windows, zipfile=args.zipfile, options=options)